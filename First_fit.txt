//First_fit.java

class First_fit{
    // Method to allocate memory to
    // blocks as per First fit algorithm
    static void firstFit(int blockSize[], int m, int processSize[], int n) {
    // Stores block id of the
    // block allocated to a process
        int allocation[] = new int[n];
        // Initially no block is assigned to any process
        for (int i = 0; i < allocation.length; i++)
            allocation[i] = -1;
// pick each process and find suitable blocks
// according to its size ad assign to it
        for (int i = 0; i < n; i++){
            for (int j = 0; j < m; j++){
                if (blockSize[j] >= processSize[i]){
// allocate block j to p[i] process
                    allocation[i] = j;
// Reduce available memory in this block.
                    blockSize[j] -= processSize[i];
                    break;
                }
            }
        }
        System.out.println("\nProcess No.\tProcess Size\tBlock no.");
        for (int i = 0; i < n; i++){
            System.out.print(" " + (i+1) + "\t\t" +
            processSize[i] + "\t\t");
            if (allocation[i] != -1)
                System.out.print(allocation[i] + 1);
            else
                System.out.print("Not Allocated");
            System.out.println();
        }
    }
// Driver Code
    public static void main(String[] args){
        int blockSize[] = {100, 500, 200, 300, 600};
        int processSize[] = {212, 417, 112, 426};
        int m = blockSize.length;
        int n = processSize.length;
        firstFit(blockSize, m, processSize, n);
    }
}

//Output:
PS E:\TE\SPOS> javac First_fit.java
PS E:\TE\SPOS> java First_fit      

Process No.     Process Size    Block no.
 1              212             2
 2              417             5
 3              112             2
 4              426             Not Allocated

//Next_fit.java

import java.util.Arrays;
public class Next_fit {
// Function to allocate memory to blocks as per Next fit
// algorithm
    static void NextFit(int blockSize[], int m, int processSize[], int n) {
// Stores block id of the block allocated to a
// process
        int allocation[] = new int[n], j = 0;
// Initially no block is assigned to any process
        Arrays.fill(allocation, -1);
// pick each process and find suitable blocks
// according to its size ad assign to it
        for (int i = 0; i < n; i++) {
        // Do not start from beginning
            int count = 0;
            while (j < m) {
                count++; //makes sure that for every process we traverse through entire array maximum once only.This avoids the problem of going into infinite loop if memory is not available
                if (blockSize[j] >= processSize[i]) {
// allocate block j to p[i] process
                    allocation[i] = j;
// Reduce available memory in this block.
                    blockSize[j] -= processSize[i];
                    break;
                }
    // mod m will help in traversing the blocks from
    // starting block after we reach the end.
                j = (j + 1) % m;
            }
        }
        System.out.print("\nProcess No.\tProcess Size\tBlock no.\n");
        for (int i = 0; i < n; i++) {
            System.out.print( i + 1 + "\t\t" + processSize[i] + "\t\t");
            if (allocation[i] != -1) {
                System.out.print(allocation[i] + 1);
            } 
            else {
                System.out.print("Not Allocated");
            }
            System.out.println("");
        }
    }
// Driver program
    static public void main(String[] args) {
        int blockSize[] = {5, 10, 20};
        int processSize[] = {10, 20, 5};
        int m = blockSize.length;
        int n = processSize.length;
        NextFit(blockSize, m, processSize, n);
    }
}

//Output:

PS E:\TE\SPOS> javac Next_fit.java 
PS E:\TE\SPOS> java Next_fit      

Process No.     Process Size    Block no.
1               10              2
2               20              3
3               5               1

//Best_fit.java

public class Best_fit{
    // Method to allocate memory to blocks as per Best fit
    // algorithm
    static void bestFit(int blockSize[], int m, int processSize[],int n){
    // Stores block id of the block allocated to a
    // process
        int allocation[] = new int[n];
        // Initially no block is assigned to any process
        for (int i = 0; i < allocation.length; i++)
            allocation[i] = -1;
    // pick each process and find suitable blocks
// according to its size ad assign to it
        for (int i=0; i<n; i++){
    // Find the best fit block for current process
            int bestIdx = -1;
            for (int j=0; j<m; j++){
                if (blockSize[j] >= processSize[i]){
                    if (bestIdx == -1)
                        bestIdx = j;
                    else if (blockSize[bestIdx] > blockSize[j])
                        bestIdx = j;
                }
            }
    // If we could find a block for current process
            if (bestIdx != -1){
        // allocate block j to p[i] process
                allocation[i] = bestIdx;
    // Reduce available memory in this block.
                blockSize[bestIdx] -= processSize[i];
            }
        }
        System.out.println("\nProcess No.\tProcess Size\tBlock no.");
        for (int i = 0; i < n; i++){
            System.out.print(" " + (i+1) + "\t\t" + processSize[i] + "\t\t");
            if (allocation[i] != -1)
                System.out.print(allocation[i] + 1);
            else
                System.out.print("Not Allocated");
                System.out.println();
        }
    }
    // Driver Method
    public static void main(String[] args){
        int blockSize[] = {100, 500, 200, 300, 600};
        int processSize[] = {212, 417, 112, 426};
        int m = blockSize.length;
        int n = processSize.length;
        bestFit(blockSize, m, processSize, n);
    }
}

//Output:

PS E:\TE\SPOS> javac Best_fit.java
PS E:\TE\SPOS> java Best_fit      

Process No.     Process Size    Block no.
 1              212             4
 2              417             2
 3              112             3
 4              426             5

//Worst_fit.java

public class Worst_fit{
// Method to allocate memory to blocks as per worst fit
// algorithm
    static void worstFit(int blockSize[], int m, int processSize[],int n){
// Stores block id of the block allocated to a
// process
        int allocation[] = new int[n];
// Initially no block is assigned to any process
        for (int i = 0; i < allocation.length; i++)
            allocation[i] = -1;
        // pick each process and find suitable blocks
        // according to its size ad assign to it
        for (int i=0; i<n; i++){
// Find the best fit block for current process
            int wstIdx = -1;
            for (int j=0; j<m; j++){
                if (blockSize[j] >= processSize[i]){
                    if (wstIdx == -1)
                        wstIdx = j;
                    else if (blockSize[wstIdx] < blockSize[j])
                        wstIdx = j;
                }
            }
// If we could find a block for current process
            if (wstIdx != -1){
// allocate block j to p[i] process
                allocation[i] = wstIdx;
// Reduce available memory in this block.
                blockSize[wstIdx] -= processSize[i];
            }
        }
        System.out.println("\nProcess No.\tProcess Size\tBlock no.");
        for (int i = 0; i < n; i++){
            System.out.print(" " + (i+1) + "\t\t" + processSize[i] + "\t\t");
            if (allocation[i] != -1)
                System.out.print(allocation[i] + 1);
            else
                System.out.print("Not Allocated");
                System.out.println();
        }
    }
// Driver Method
    public static void main(String[] args){
        int blockSize[] = {100, 500, 200, 300, 600};
        int processSize[] = {212, 417, 112, 426};
        int m = blockSize.length;
        int n = processSize.length;
        worstFit(blockSize, m, processSize, n);
    }
}

//Output:
PS E:\TE\SPOS> javac Worst_fit.java
PS E:\TE\SPOS> java Worst_fit      

Process No.     Process Size    Block no.
 1              212             5
 2              417             2
 3              112             5
 4              426             Not Allocated