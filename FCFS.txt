//FCFS.java

import java.util.*;
public class FCFS {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter no of process: ");
        int n = sc.nextInt();
        int pid[] = new int[n]; // process ids
        int ar[] = new int[n]; // arrival times
        int bt[] = new int[n]; // burst or execution times
        int ct[] = new int[n]; // completion times
        int ta[] = new int[n]; // turn around times
        int wt[] = new int[n]; // waiting times
        int temp;
        float avgwt=0,avgta=0;
        for(int i = 0; i < n; i++) {
            System.out.println("enter process " + (i+1) + " arrival time: ");
            ar[i] = sc.nextInt();
            System.out.println("enter process " + (i+1) + " brust time: ");
            bt[i] = sc.nextInt();
            pid[i] = i+1;
        }
    //sorting according to arrival times
        for(int i = 0 ; i <n; i++) {
            for(int j=0; j < n-(i+1) ; j++) {
                if( ar[j] > ar[j+1] ) {
                    temp = ar[j];
                    ar[j] = ar[j+1];
                    ar[j+1] = temp;
                    temp = bt[j];
                    bt[j] = bt[j+1];
                    bt[j+1] = temp;
                    temp = pid[j];
                    pid[j] = pid[j+1];
                    pid[j+1] = temp;
                }
            }
        }
    // finding completion times
        for(int i = 0 ; i < n; i++){
            if( i == 0) {
                ct[i] = ar[i] + bt[i];
            }
            else {
                if( ar[i] > ct[i-1]) {
                    ct[i] = ar[i] + bt[i];
                }
                else{
                    ct[i] = ct[i-1] + bt[i];
                }
            }
            ta[i] = ct[i] - ar[i] ; // turnaround time= completion time- arrival time
            wt[i] = ta[i] - bt[i] ; // waiting time= turnaround time- burst time
            avgwt += wt[i] ; // total waiting time
            avgta += ta[i] ; // total turnaround time
        }
        System.out.println("\npid arrival brust complete turn waiting");
        for(int i = 0 ; i< n; i++) {
            System.out.println(pid[i] + " \t " + ar[i] + "\t" + bt[i] + "\t" + ct[i] + "\t" + ta[i] + "\t" + wt[i] ) ;
        }
        sc.close();
        System.out.println("\naverage waiting time: "+ (avgwt/n)); // printing average waiting time.
        System.out.println("average turnaround time:"+(avgta/n)); // printing average turnaround time.
    }
}

//Output:

PS E:\TE\SPOS> javac FCFS.java
PS E:\TE\SPOS> java FCFS      
enter no of process: 
4
enter process 1 arrival time: 
0
enter process 1 brust time: 
6
enter process 2 arrival time: 
1
enter process 2 brust time: 
5
enter process 3 arrival time: 
2
enter process 3 brust time:
8
enter process 4 arrival time:
2
enter process 4 brust time:
7

pid arrival brust   complete   turn waiting
1        0      6       6       6       0
2        1      5       11      10      5
3        2      8       19      17      9
4        2      7       26      24      17

average waiting time: 7.75
average turnaround time:14.25

//SJF.java

import java.util.Scanner;
public class SJF {
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        System.out.println("enter no of process: ");
        int n = sc.nextInt();
        int pid[] = new int[n]; // process ids
        int ar[] = new int[n]; // arrival times
        int bt[] = new int[n]; // burst or execution times
        int ct[] = new int[n]; // completion times
        int ta[] = new int[n]; // turn around times
        int wt[] = new int[n]; // waiting times
        int f[] = new int[n];
        int k[] = new int[n];
        int temp, tot=0,st=0;
        float avgwt=0,avgta=0;
        for(int i = 0; i < n; i++){
            System.out.println("enter process " + (i+1) + " arrival time: ");
            ar[i] = sc.nextInt();
            System.out.println("enter process " + (i+1) + " brust time: ");
            bt[i] = sc.nextInt();
            k[i] = bt[i];
            pid[i] = i+1;
        }
        while(true){
            int min = 99 , c =n;
            if(tot == n) break;
            for(int i=0;i<n;i++){
                if(ar[i]<=st && f[i] == 0 && bt[i]<min ){
                    min = bt[i];
                    c = i;
                }
            }
            if (c == n) st++;
            else{
                bt[c]--;
                st++;
                if(bt[c] == 0){
                    ct[c] =st;
                    f[c]=1;
                    tot++;
                }
            }
        }
        for(int i=0;i<n;i++){
            ta[i] = ct[i] - ar[i];
            wt[i] = ta[i] - k[i];
            avgwt += wt[i];
            avgta += ta[i];
        }
        System.out.println("pid arrival burst complete turn waiting");
        for(int i=0;i<n;i++){
            System.out.println(pid[i] +"\t"+ ar[i]+"\t"+ k[i] +"\t"+ ct[i] +"\t"+ ta[i] +"\t"+ wt[i]);
        }
        System.out.println("\naverage tat is "+ (float)(avgta/n));
        System.out.println("average wt is "+ (float)(avgwt/n));
        sc.close();
    }
}


//Output:
PS E:\TE\SPOS> javac SJF.java 
PS E:\TE\SPOS> java SJF      
enter no of process: 
4
enter process 1 arrival time:
0
enter process 1 brust time:
6
enter process 2 arrival time:
1
enter process 2 brust time:
8
enter process 3 arrival time:
2
enter process 3 brust time:
5
enter process 4 arrival time:
2
enter process 4 brust time:
7
pid arrival burst complete turn waiting
1       0       6       6       6       0
2       1       8       26      25      17
3       2       5       11      9       4
4       2       7       18      16      9

average tat is 14.0
average wt is 7.5

//Priority.java

import java.util.Scanner;
public class Priority {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the number of processes:");
        int n = sc.nextInt();
        int i, pos=0, temp;
        System.out.println("Enter the burst times:");
        int p[] = new int[n];
        int bt[] = new int[n]; //burst time
        int pt[] = new int[n]; //priority time
        int wt[] = new int[n]; //waiting time
        int tat[] = new int[n]; //turn-around time
        for (i = 0; i < n; i++) {
            p[i] = i + 1;
            bt[i] = sc.nextInt();
        }
        System.out.println("Enter priority time:");
        for (i = 0; i < n; i++) {
            pt[i] = sc.nextInt();
        }
        for (i = 0; i < n; i++) {
            pos = i;
            for (int j = i + 1; j < n; j++) {
                if (pt[j] < pt[pos]) {
                    pos = j;
                }
            }
            temp = pt[pos];
            pt[pos] = pt[i];
            pt[i] = temp;
            temp = p[pos];
            p[pos] = p[i];
            p[i] = temp;
            temp = bt[pos];
            bt[pos] = bt[i];
            bt[i] = temp;
        }
        wt[0] = 0;
        /*for(i=1;i<n;i++){
            wt[i]=0;
            for(int j=0;j<i;j++){
                wt[i]+=bt[j];
            }
        }*/
        for (i = 1; i < n; i++) {
            wt[i] = wt[i - 1] + bt[i - 1];
        }
        System.out.println("Process\tBT\tpriority\twaiting time\tTAT");
        for (i = 0; i < n; i++) {
            tat[i] = bt[i] + wt[i];
            System.out.println(p[i] + "\t" + bt[i] + "\t" + pt[i] + "\t\t" + wt[i] + "\t\t" + tat[i]);
        }
        sc.close();
    }
}

//Output:
PS E:\TE\SPOS> javac Priority.java
PS E:\TE\SPOS> java Priority      
Enter the number of processes:
4
Enter the burst times:
0
8
6
7
Enter priority time:
2
3
2
4
Process BT      priority        waiting time    TAT
1       0       2               0               0
3       6       2               0               6
2       8       3               6               14
4       7       4               14              21


//Round_Robin.java

import java.util.Scanner;
public class Round_Robin{
    int burst[],run[],np,quantom=0,wait[],time=0,rp=0,ta[];
    public Round_Robin(){
        Scanner sc=new Scanner(System.in);
        Scanner sc1=new Scanner(System.in);
        System.out.println("Enter the number of pro: ");
        np=sc.nextInt();
        rp=np;
        burst=new int[np];
        run=new int[np];
        wait=new int[np];
        ta=new int[np];
        System.out.println("Enter their burst times: ");
        for(int i=0;i<np;i++){
            burst[i]=sc1.nextInt();
            run[i]=burst[i];
            wait[i]=0;
        }
        System.out.println("Enter Quantom: ");
        quantom=sc.nextInt();
        logic();
    }
    public void logic(){
        int i=0;
        while(rp!=0){
            if(run[i]>quantom){
                run[i]=run[i]-quantom;
                time=time+quantom;
                /*if(run[i]==0){
                    ta[i]=time;
                    rp--;
                }*/
                System.out.println("Process: "+i+" time: "+time);
            }
            else if(run[i]<=quantom && run[i]>0){
                time=time+run[i];
                run[i]=run[i]-run[i];
                ta[i]=time;
                rp--;
                System.out.println("Process: "+i+"time: "+time);
            }
            i++;
            if(i==np){
                i=0;
            }
        }
        for(int j=0;j<np;j++){
            wait[j]=ta[j]-burst[j];
            System.out.println(ta[j]);
            System.out.println(" ");
            System.out.println(wait[j]);
        }
    }
    public static void main(String[] args) {
        new Round_Robin();
    }
}

//Output:

PS E:\TE\SPOS> javac Round_Robin.java
PS E:\TE\SPOS> java Round_Robin      
Enter the number of pro: 
4
Enter their burst times:
8
6
5
7
Enter Quantom:
3
Process: 0 time: 3
Process: 1 time: 6
Process: 2 time: 9
Process: 3 time: 12
Process: 0 time: 15
Process: 1time: 18
Process: 2time: 20
Process: 3 time: 23
Process: 0time: 25
Process: 3time: 26
25

17
18

12
20

15
26

19